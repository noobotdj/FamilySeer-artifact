Namespace(batch_size=1, gpu_num=1, mode='familyseer', model='gpt2', pre_tuned='../pre-tuned_data/FamilySeer/NVIDIA_V100/', tune=False)
../pre-tuned_data/FamilySeer/NVIDIA_V100/gpt2-NHWC-B1-cuda.json
Get model...
Extract tasks...
========== Task 0  (workload key: ["db3f35d71c2b463d338eb14acd963ed2", 128, 128, 768, 128, 128, 1]) ==========
task weight: 25
placeholder = PLACEHOLDER [128, 128, 768]
compile_engine_const() = 2f
T_power(ax0, ax1, ax2) = tir.pow(placeholder[ax0, ax1, ax2], compile_engine_const[])
T_power_red(ax0, ax1, ax2) += T_power[ax0, ax1, k2]
T_divide(ax0, ax1, ax2) = (T_power_red[ax0, ax1, ax2]/768f)

========== Task 1  (workload key: ["9847f8cc0b305137f49f2c5c0c8ab25d", 16384, 3072, 768, 3072, 768, 16384, 768]) ==========
task weight: 12
placeholder = PLACEHOLDER [16384, 3072]
placeholder = PLACEHOLDER [768, 3072]
T_dense(i, j) += (placeholder[i, k]*placeholder[j, k])
placeholder = PLACEHOLDER [768]
T_add(ax0, ax1) = (T_dense[ax0, ax1] + placeholder[ax1])

========== Task 2  (workload key: ["9847f8cc0b305137f49f2c5c0c8ab25d", 16384, 768, 3072, 768, 3072, 16384, 3072]) ==========
task weight: 12
placeholder = PLACEHOLDER [16384, 768]
placeholder = PLACEHOLDER [3072, 768]
T_dense(i, j) += (placeholder[i, k]*placeholder[j, k])
placeholder = PLACEHOLDER [3072]
T_add(ax0, ax1) = (T_dense[ax0, ax1] + placeholder[ax1])

========== Task 3  (workload key: ["9847f8cc0b305137f49f2c5c0c8ab25d", 16384, 768, 768, 768, 768, 16384, 768]) ==========
task weight: 12
placeholder = PLACEHOLDER [16384, 768]
placeholder = PLACEHOLDER [768, 768]
T_dense(i, j) += (placeholder[i, k]*placeholder[j, k])
placeholder = PLACEHOLDER [768]
T_add(ax0, ax1) = (T_dense[ax0, ax1] + placeholder[ax1])

========== Task 4  (workload key: ["d2a28fdf41e83222456f5a6e5bf8a24a", 1536, 128, 128, 1536, 64, 128, 1536, 128, 64]) ==========
task weight: 12
placeholder = PLACEHOLDER [1536, 128, 128]
placeholder = PLACEHOLDER [1536, 64, 128]
compute(b, i, j) += (placeholder[b, i, k]*placeholder[b, j, k])

========== Task 5  (workload key: ["d2a28fdf41e83222456f5a6e5bf8a24a", 1536, 128, 64, 1536, 128, 64, 1536, 128, 128]) ==========
task weight: 12
placeholder = PLACEHOLDER [1536, 128, 64]
placeholder = PLACEHOLDER [1536, 128, 64]
compute(b, i, j) += (placeholder[b, i, k]*placeholder[b, j, k])

========== Task 6  (workload key: ["9847f8cc0b305137f49f2c5c0c8ab25d", 16384, 768, 2304, 768, 2304, 16384, 2304]) ==========
task weight: 12
placeholder = PLACEHOLDER [16384, 768]
placeholder = PLACEHOLDER [2304, 768]
T_dense(i, j) += (placeholder[i, k]*placeholder[j, k])
placeholder = PLACEHOLDER [2304]
T_add(ax0, ax1) = (T_dense[ax0, ax1] + placeholder[ax1])

========== Task 7  (workload key: ["2dde9ffcbf97381c0f0307643e09dac5", 128, 128, 768, 128, 128, 1]) ==========
task weight: 25
placeholder = PLACEHOLDER [128, 128, 768]
placeholder_red(ax0, ax1, ax2) += placeholder[ax0, ax1, k2]
T_divide(ax0, ax1, ax2) = (placeholder_red[ax0, ax1, ax2]/768f)

========== Task 8  (workload key: ["f4f2214d17233bc289bd96b00cdb4b28", 128, 12, 128, 128, 128, 12, 128, 1]) ==========
task weight: 12
placeholder = PLACEHOLDER [128, 12, 128, 128]
placeholder_red(ax0, ax1, ax2, ax3) max= placeholder[ax0, ax1, ax2, k3]

========== Task 9  (workload key: ["a8d7ee9c74ef2b668a6d6e714807edc9", 128, 12, 128, 128, 128, 12, 128, 1]) ==========
task weight: 12
placeholder = PLACEHOLDER [128, 12, 128, 128]
placeholder_red(ax0, ax1, ax2, ax3) += placeholder[ax0, ax1, ax2, k3]

Compile...
Evaluate inference time cost...
Mean inference time (std dev): 319.07 ms (0.11 ms)
network: gpt2, tuning time: 00:00:00, 1.8358230590820312e-05
