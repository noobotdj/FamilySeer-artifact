Namespace(batch_size=1, gpu_num=1, mode='familyseer', model='mobilenetv2_0.5', pre_tuned='./pre-tuned_data/Ansor/NVIDIA_V100/', tune=False)
./pre-tuned_data/Ansor/NVIDIA_V100/-NHWC-B1-cuda.json
Get model...
Extract tasks...
========== Task 0  (workload key: ["d7b65649a4dd54becea0a52aabbc5af5", 1, 1000, 1, 1000]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 1000]
T_softmax_maxelem(i0) max= placeholder[i0, k]
T_softmax_exp(i0, i1) = tir.exp((placeholder[i0, i1] - T_softmax_maxelem[i0]))
T_softmax_expsum(i0) += T_softmax_exp[i0, k]
T_softmax_norm(i0, i1) = (T_softmax_exp[i0, i1]/T_softmax_expsum[i0])

========== Task 1  (workload key: ["7006235cfc29b73be524cf390ed5a977", 1, 1, 1, 1280, 1, 1, 1280, 1000, 1, 1, 1, 1000]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 1, 1, 1280]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 1280, 1000]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])

========== Task 2  (workload key: ["69115f188984ae34ede37c3b8ca40b43", 1, 7, 7, 1280, 1, 1, 1, 1280]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 7, 7, 1280]
tensor(ax0, ax1, ax2, ax3) += placeholder[ax0, ((ax1*7) + rv0), ((ax2*7) + rv1), ax3]
tensor(ax0, ax1, ax2, ax3) = (tensor[ax0, ax1, ax2, ax3]/(float32((select((bool)1, ((ax1 + 1)*7), (((ax1 + 1)*7) + 1)) - (ax1*7)))*float32((select((bool)1, ((ax2 + 1)*7), (((ax2 + 1)*7) + 1)) - (ax2*7)))))

========== Task 3  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 7, 7, 160, 1, 1, 160, 1280, 1, 1, 1, 1280, 1, 7, 7, 1280]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 7, 7, 160]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 160, 1280]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 1280]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 4  (workload key: ["9f4c6b76f51d20e5c3bfb1817edd446e", 1, 7, 7, 480, 1, 1, 480, 160, 1, 1, 1, 160, 1, 7, 7, 160]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 7, 7, 480]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 480, 160]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 160]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])

========== Task 5  (workload key: ["e9e103f65702a2fd87f39e36dae33885", 1, 7, 7, 480, 3, 3, 480, 1, 1, 1, 1, 480, 1, 7, 7, 480]) ==========
task weight: 3
placeholder = PLACEHOLDER [1, 7, 7, 480]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 8)) && (i2 >= 1)) && (i2 < 8)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 480, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, (i + di), (j + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 480]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 6  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 7, 7, 80, 1, 1, 80, 480, 1, 1, 1, 480, 1, 7, 7, 480]) ==========
task weight: 3
placeholder = PLACEHOLDER [1, 7, 7, 80]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 80, 480]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 480]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 7  (workload key: ["42e3fa8828a931031e7bd25b0484a9ea", 1, 7, 7, 480, 1, 1, 480, 80, 1, 1, 1, 80, 1, 7, 7, 80, 1, 7, 7, 80]) ==========
task weight: 2
placeholder = PLACEHOLDER [1, 7, 7, 480]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 480, 80]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 80]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
placeholder = PLACEHOLDER [1, 7, 7, 80]
T_add(ax0, ax1, ax2, ax3) = (T_add[ax0, ax1, ax2, ax3] + placeholder[ax0, ax1, ax2, ax3])

========== Task 8  (workload key: ["9f4c6b76f51d20e5c3bfb1817edd446e", 1, 7, 7, 288, 1, 1, 288, 80, 1, 1, 1, 80, 1, 7, 7, 80]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 7, 7, 288]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 288, 80]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 80]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])

========== Task 9  (workload key: ["47af0d16939e11a8064a6de9accf0744", 1, 14, 14, 288, 3, 3, 288, 1, 1, 1, 1, 288, 1, 7, 7, 288]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 14, 14, 288]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 15)) && (i2 >= 1)) && (i2 < 15)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 288, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, ((i*2) + di), ((j*2) + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 288]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 10  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 14, 14, 48, 1, 1, 48, 288, 1, 1, 1, 288, 1, 14, 14, 288]) ==========
task weight: 3
placeholder = PLACEHOLDER [1, 14, 14, 48]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 48, 288]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 288]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 11  (workload key: ["42e3fa8828a931031e7bd25b0484a9ea", 1, 14, 14, 288, 1, 1, 288, 48, 1, 1, 1, 48, 1, 14, 14, 48, 1, 14, 14, 48]) ==========
task weight: 2
placeholder = PLACEHOLDER [1, 14, 14, 288]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 288, 48]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 48]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
placeholder = PLACEHOLDER [1, 14, 14, 48]
T_add(ax0, ax1, ax2, ax3) = (T_add[ax0, ax1, ax2, ax3] + placeholder[ax0, ax1, ax2, ax3])

========== Task 12  (workload key: ["e9e103f65702a2fd87f39e36dae33885", 1, 14, 14, 288, 3, 3, 288, 1, 1, 1, 1, 288, 1, 14, 14, 288]) ==========
task weight: 2
placeholder = PLACEHOLDER [1, 14, 14, 288]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 15)) && (i2 >= 1)) && (i2 < 15)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 288, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, (i + di), (j + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 288]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 13  (workload key: ["9f4c6b76f51d20e5c3bfb1817edd446e", 1, 14, 14, 192, 1, 1, 192, 48, 1, 1, 1, 48, 1, 14, 14, 48]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 14, 14, 192]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 192, 48]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 48]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])

========== Task 14  (workload key: ["e9e103f65702a2fd87f39e36dae33885", 1, 14, 14, 192, 3, 3, 192, 1, 1, 1, 1, 192, 1, 14, 14, 192]) ==========
task weight: 4
placeholder = PLACEHOLDER [1, 14, 14, 192]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 15)) && (i2 >= 1)) && (i2 < 15)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 192, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, (i + di), (j + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 192]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 15  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 14, 14, 32, 1, 1, 32, 192, 1, 1, 1, 192, 1, 14, 14, 192]) ==========
task weight: 4
placeholder = PLACEHOLDER [1, 14, 14, 32]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 32, 192]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 192]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 16  (workload key: ["42e3fa8828a931031e7bd25b0484a9ea", 1, 14, 14, 192, 1, 1, 192, 32, 1, 1, 1, 32, 1, 14, 14, 32, 1, 14, 14, 32]) ==========
task weight: 3
placeholder = PLACEHOLDER [1, 14, 14, 192]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 192, 32]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 32]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
placeholder = PLACEHOLDER [1, 14, 14, 32]
T_add(ax0, ax1, ax2, ax3) = (T_add[ax0, ax1, ax2, ax3] + placeholder[ax0, ax1, ax2, ax3])

========== Task 17  (workload key: ["9f4c6b76f51d20e5c3bfb1817edd446e", 1, 14, 14, 96, 1, 1, 96, 32, 1, 1, 1, 32, 1, 14, 14, 32]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 14, 14, 96]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 96, 32]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 32]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])

========== Task 18  (workload key: ["47af0d16939e11a8064a6de9accf0744", 1, 28, 28, 96, 3, 3, 96, 1, 1, 1, 1, 96, 1, 14, 14, 96]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 28, 28, 96]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 29)) && (i2 >= 1)) && (i2 < 29)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 96, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, ((i*2) + di), ((j*2) + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 96]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 19  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 28, 28, 16, 1, 1, 16, 96, 1, 1, 1, 96, 1, 28, 28, 96]) ==========
task weight: 3
placeholder = PLACEHOLDER [1, 28, 28, 16]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 16, 96]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 96]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 20  (workload key: ["42e3fa8828a931031e7bd25b0484a9ea", 1, 28, 28, 96, 1, 1, 96, 16, 1, 1, 1, 16, 1, 28, 28, 16, 1, 28, 28, 16]) ==========
task weight: 2
placeholder = PLACEHOLDER [1, 28, 28, 96]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 96, 16]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 16]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
placeholder = PLACEHOLDER [1, 28, 28, 16]
T_add(ax0, ax1, ax2, ax3) = (T_add[ax0, ax1, ax2, ax3] + placeholder[ax0, ax1, ax2, ax3])

========== Task 21  (workload key: ["e9e103f65702a2fd87f39e36dae33885", 1, 28, 28, 96, 3, 3, 96, 1, 1, 1, 1, 96, 1, 28, 28, 96]) ==========
task weight: 2
placeholder = PLACEHOLDER [1, 28, 28, 96]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 29)) && (i2 >= 1)) && (i2 < 29)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 96, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, (i + di), (j + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 96]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 22  (workload key: ["9f4c6b76f51d20e5c3bfb1817edd446e", 1, 28, 28, 72, 1, 1, 72, 16, 1, 1, 1, 16, 1, 28, 28, 16]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 28, 28, 72]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 72, 16]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 16]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])

========== Task 23  (workload key: ["47af0d16939e11a8064a6de9accf0744", 1, 56, 56, 72, 3, 3, 72, 1, 1, 1, 1, 72, 1, 28, 28, 72]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 56, 56, 72]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 57)) && (i2 >= 1)) && (i2 < 57)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 72, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, ((i*2) + di), ((j*2) + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 72]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 24  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 56, 56, 12, 1, 1, 12, 72, 1, 1, 1, 72, 1, 56, 56, 72]) ==========
task weight: 2
placeholder = PLACEHOLDER [1, 56, 56, 12]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 12, 72]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 72]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 25  (workload key: ["42e3fa8828a931031e7bd25b0484a9ea", 1, 56, 56, 72, 1, 1, 72, 12, 1, 1, 1, 12, 1, 56, 56, 12, 1, 56, 56, 12]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 56, 56, 72]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 72, 12]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 12]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
placeholder = PLACEHOLDER [1, 56, 56, 12]
T_add(ax0, ax1, ax2, ax3) = (T_add[ax0, ax1, ax2, ax3] + placeholder[ax0, ax1, ax2, ax3])

========== Task 26  (workload key: ["e9e103f65702a2fd87f39e36dae33885", 1, 56, 56, 72, 3, 3, 72, 1, 1, 1, 1, 72, 1, 56, 56, 72]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 56, 56, 72]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 57)) && (i2 >= 1)) && (i2 < 57)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 72, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, (i + di), (j + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 72]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 27  (workload key: ["9f4c6b76f51d20e5c3bfb1817edd446e", 1, 56, 56, 48, 1, 1, 48, 12, 1, 1, 1, 12, 1, 56, 56, 12]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 56, 56, 48]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 48, 12]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 12]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])

========== Task 28  (workload key: ["47af0d16939e11a8064a6de9accf0744", 1, 112, 112, 48, 3, 3, 48, 1, 1, 1, 1, 48, 1, 56, 56, 48]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 112, 112, 48]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 113)) && (i2 >= 1)) && (i2 < 113)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 48, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, ((i*2) + di), ((j*2) + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 48]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 29  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 112, 112, 8, 1, 1, 8, 48, 1, 1, 1, 48, 1, 112, 112, 48]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 112, 112, 8]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 8, 48]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 48]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 30  (workload key: ["9f4c6b76f51d20e5c3bfb1817edd446e", 1, 112, 112, 16, 1, 1, 16, 8, 1, 1, 1, 8, 1, 112, 112, 8]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 112, 112, 16]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 16, 8]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 8]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])

========== Task 31  (workload key: ["e9e103f65702a2fd87f39e36dae33885", 1, 112, 112, 16, 3, 3, 16, 1, 1, 1, 1, 16, 1, 112, 112, 16]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 112, 112, 16]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 113)) && (i2 >= 1)) && (i2 < 113)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 16, 1]
DepthwiseConv2d(b, i, j, c) += (PaddedInput[b, (i + di), (j + dj), c]*placeholder[di, dj, c, 0])
placeholder = PLACEHOLDER [1, 1, 1, 16]
T_add(ax0, ax1, ax2, ax3) = (DepthwiseConv2d[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 32  (workload key: ["03176acd2281d74dd4883a5819b525d7", 1, 112, 112, 16, 1, 1, 16, 16, 1, 1, 1, 16, 1, 112, 112, 16]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 112, 112, 16]
PaddedInput(i0, i1, i2, i3) = placeholder[i0, i1, i2, i3]
placeholder = PLACEHOLDER [1, 1, 16, 16]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, (yy + ry), (xx + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 16]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

========== Task 33  (workload key: ["7e19c8326781d4edeae89233de090b83", 1, 224, 224, 3, 3, 3, 3, 16, 1, 1, 1, 16, 1, 112, 112, 16]) ==========
task weight: 1
placeholder = PLACEHOLDER [1, 224, 224, 3]
PaddedInput(i0, i1, i2, i3) = tir.if_then_else(((((i1 >= 1) && (i1 < 225)) && (i2 >= 1)) && (i2 < 225)), placeholder[i0, (i1 - 1), (i2 - 1), i3], 0f)
placeholder = PLACEHOLDER [3, 3, 3, 16]
Conv2dOutput(nn, yy, xx, ff) += (PaddedInput[nn, ((yy*2) + ry), ((xx*2) + rx), rc]*placeholder[ry, rx, rc, ff])
placeholder = PLACEHOLDER [1, 1, 1, 16]
T_add(ax0, ax1, ax2, ax3) = (Conv2dOutput[ax0, ax1, ax2, ax3] + placeholder[ax0, 0, 0, ax3])
compute(i0, i1, i2, i3) = max(min(T_add[i0, i1, i2, i3], 6f), 0f)

Compile...
